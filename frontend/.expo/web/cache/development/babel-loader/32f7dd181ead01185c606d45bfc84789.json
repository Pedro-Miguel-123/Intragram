{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport { SnapshotViewIOSComponent } from \"react-native-web/dist/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nimport 'firebase/firestore';\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    console.log(\"OLA \" + getState().usersState.users);\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split('/')[1];\n      console.log(\"OLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + uid);\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/pedro/instagram/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","CLEAR_DATA","SnapshotViewIOSComponent","firebase","require","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","usersState","users","found","some","el","user","fetchUsersFollowingPosts","ref","path","split","find","USERS_POSTS_STATE_CHANGE"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE , USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, CLEAR_DATA} from '../constants/index'\r\nimport { SnapshotViewIOSComponent } from 'react-native'\r\nimport firebase from 'firebase'\r\nrequire('firebase/firestore')\r\nimport 'firebase/firestore'\r\n\r\nexport function clearData(){\r\n    return((dispatch)=>{\r\n        dispatch({type: CLEAR_DATA})\r\n    })\r\n}\r\nexport function fetchUser(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .get()\r\n            .then((snapshot)=>{\r\n                if(snapshot.exists){\r\n                    dispatch({type : USER_STATE_CHANGE, currentUser: snapshot.data()})\r\n                }\r\n                else{\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot)=>{\r\n                let posts = snapshot.docs.map(doc =>{\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return{id, ...data}\r\n                })\r\n                dispatch({type : USER_POSTS_STATE_CHANGE, posts})\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing(){\r\n    return((dispatch) => {\r\n        firebase.firestore()\r\n            .collection(\"following\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userFollowing\")\r\n            .onSnapshot((snapshot)=>{\r\n                let following = snapshot.docs.map(doc =>{\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({type : USER_FOLLOWING_STATE_CHANGE, following});\r\n                for(let i=0;i < following.length;i++){\r\n                    dispatch(fetchUsersData(following[i],true));\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid, getPosts){\r\n    return((dispatch,getState)=>{\r\n        console.log(\"OLA \" + getState().usersState.users);\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        if(!found){\r\n            firebase.firestore()\r\n            .collection(\"users\")\r\n            .doc(uid)\r\n            .get()\r\n            .then((snapshot)=>{\r\n                if(snapshot.exists){\r\n                    let user = snapshot.data();\r\n                    user.uid = snapshot.id;\r\n\r\n                    dispatch({type : USERS_DATA_STATE_CHANGE, user});\r\n                }\r\n                else{\r\n                    console.log('does not exist')\r\n                }\r\n            })\r\n            if(getPosts){\r\n                dispatch(fetchUsersFollowingPosts(uid));\r\n            }\r\n        }\r\n        \r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid){\r\n    return((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot)=>{\r\n\r\n                const uid = snapshot.docs[0].ref.path.split('/')[1];\r\n                console.log(\"OLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + uid);\r\n                const user = getState().usersState.users.find(el => el.uid === uid);\r\n\r\n                let posts = snapshot.docs.map(doc =>{\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return{id, ...data, user}\r\n                })\r\n                dispatch({type : USERS_POSTS_STATE_CHANGE, posts, uid})\r\n            })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}